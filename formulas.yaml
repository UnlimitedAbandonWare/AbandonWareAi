version: '1.0'
patterns:
  gradle.build_failed:
    regex: 'FAILURE: Build failed with an exception'
    actions:
    - gradle --version
    - gradle --stacktrace --info
    - gradle --refresh-dependencies
    notes: General Gradle failure triage
  java.cannot_find_symbol:
    regex: cannot find symbol
    actions:
    - mvn -q -DskipTests -U compile || gradle classes
    - Search project for missing import; if module is internal, add to settings.gradle
      / include
    - If external library, add dependency to pom.xml/ build.gradle(.kts) and re-sync
    - 'Gradle: dependencies { compileOnly ''org.projectlombok:lombok:1.18.34''; annotationProcessor
      ''org.projectlombok:lombok:1.18.34'' }'
    - 'Gradle: tasks.withType(JavaCompile){ options.compilerArgs += [''-parameters'']
      }'
    - 'Maven: <dependency>lombok</dependency> with <scope>provided</scope> and <annotationProcessorPaths>'
    - 'Ensure IDE ''Enable annotation processing'' is on (IntelliJ: Settings > Build
      > Compiler > Annotation Processors).'
    - 'Run tools/java_split_public_types.py --root <project> --apply  # split multi-public-type
      files'
    autofix:
    - type: gradle_refresh
      cmd: gradle --refresh-dependencies
    - type: maven_update
      cmd: mvn -U dependency:resolve
    notes: Often caused by missing dependency or wrong Java target.
  java.package_does_not_exist:
    regex: package [\w\.\-]+ does not exist
    actions:
    - Check group/artifact versions; add missing dependency
    - 'Gradle: ensure repositories { mavenCentral() } is present'
    - 'Maven: run mvn -U -DskipTests compile'
    notes: Missing dependency or wrong source set.
  gradle.dependency_resolution:
    regex: Could not resolve (all|any) files for configuration
    actions:
    - Check network/proxy; verify repository endpoints
    - gradle --refresh-dependencies
    - 'Lockfile: delete ~/.gradle/caches if corrupted'
    - Ensure repositories { mavenCentral(); google(); } exists in settings.gradle
      or build.gradle
    - 'If org.projectlombok:lombok not found, add mavenCentral() and refresh: ./gradlew
      --refresh-dependencies'
    notes: Transient resolution failures or pinned versions.
  gradle.plugin_version_mismatch:
    regex: Plugin .* (was not found|requires Gradle)
    actions:
    - 'Upgrade Gradle wrapper to required version: ./gradlew wrapper --gradle-version
      <X.Y>'
    - Align Android Gradle Plugin and Gradle versions per release notes
    notes: Version alignment required.
  maven.build_failure:
    regex: \[ERROR\] BUILD FAILURE|\[ERROR\] Failed to execute goal
    actions:
    - mvn -e -DskipTests package
    - Check failing plugin configuration; enable -X for debug
    notes: Inspect plugin trace.
  node.module_not_found:
    regex: 'Error: Cannot find module ''.*'''
    actions:
    - rm -rf node_modules && npm ci
    - 'Check path/exports; if ES module, ensure type: module or extension'
    - 'pnpm: pnpm install --lockfile-only && pnpm i'
    notes: Lockfile or import path mismatch.
  typescript.cannot_find_module:
    regex: Cannot find module '.*' or its corresponding type declarations
    actions:
    - npm i -D @types/<pkg> or add path mapping in tsconfig.json
    - Verify tsconfig 'typeRoots' and 'paths'
    notes: Missing typings or tsconfig paths.
  python.import_error:
    regex: '(ModuleNotFoundError|ImportError):'
    actions:
    - pip install -r requirements.txt
    - Verify PYTHONPATH and package __init__.py
    notes: Virtualenv or path issue.
  java.incompatible_types:
    regex: 'incompatible types:'
    actions:
    - <add remediation steps>
    - Check javax.* vs jakarta.* imports; align dependencies (Jakarta EE 9+ uses jakarta.*).
    - If using Spring Boot 3.x, migrate javax.* -> jakarta.*; run IDE refactor.
    notes: Added from persisted error DB scan

probe:
  search:
    enabled: false
  admin-token: ''


retrieval:
  vector:
    enabled: true
