# cfvm_errorbreak_presets.yaml
version: 1
engine: nova.errorbreak
cfvm_raw_loader: classpath:novabreak_fake_experiences.jsonl  # overrideable by absolute path
thresholds:
  warn: 0.6
  break: 0.8
presets:
  - id: BREAK_high_conf
    target_level: BREAK
    dataset: cfvm_errorbreak_fake_BREAK.jsonl
    expected_score: 1.0   # top-3 / total = 3n / 3n
    notes: >
      Use minimal 3-slot events (stage, component, signal_code). Combine with context 'lastError'
      to simulate dangerous clusters. Suitable to trip hard guard.
  - id: WARN_mid_conf
    target_level: WARN
    dataset: cfvm_errorbreak_fake_WARN.jsonl
    expected_score: 0.6   # 3n / 5n
    notes: >
      5-slot events where message_fp and line vary per event so they do not enter top-3.
      Optionally add 'timeout' in context to push to high-WARN.
  - id: OK_baseline
    target_level: OK
    dataset: cfvm_errorbreak_fake_OK.jsonl
    expected_score: 0.375 # 3n / 8n
    notes: >
      Full events with exception/file/tags reduce concentration; should not trigger guard.
  - id: CONTEXT_hints
    target_level: N/A
    dataset: nova_errorbreak_context_hints.jsonl
    notes: >
      When feeding NovaErrorBreakImpl.evaluate(ctx), set ctx.lastError to strings listed here
      to apply implementation's additive boosts (+0.25 for 'cannot find symbol', +0.15 for 'timeout').
usage:
  # Java (NovaErrorBreakImpl + CfvmRawService)
  - step: "Place one of the .jsonl under classpath or pass absolute path via CfvmRawService"
  - step: "Build a context map: Map.of('lastError','cannot find symbol HybridRetriever')"
  - step: "engine.evaluate(context)"
application_yaml:
  nova:
    errorbreak:
      enabled: true
      mode: guard
      cluster:
        min-support: 3
        min-confidence: 0.6
        cooldown-seconds: 900

probe:
  search:
    enabled: false
  admin-token: ''


retrieval:
  vector:
    enabled: true